import { useState } from "react";
import { useCart } from "../context/CartContext";
import { useAuth } from "../context/AuthContext";
import { createOrder } from "../api/orders";
import { User, Phone, MapPin, CreditCard } from "lucide-react";
import "./../styles.css"; // import CSS chung

export default function Checkout({ onComplete }) {
  const { items, clear: clearCart } = useCart();

  const { user } = useAuth();
  const [form, setForm] = useState({
    name: "",
    phone: "",
    address: "",
    payment: "cod",
  });
  const [loading, setLoading] = useState(false);

  const total = items.reduce(
    (sum, item) => sum + item.price * item.quantity,
    0
  );

  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!form.name || !form.phone || !form.address) {
      alert("‚ö†Ô∏è Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin giao h√†ng!");
      return;
    }

    // N·∫øu ch∆∞a ƒëƒÉng nh·∫≠p th√¨ kh√¥ng cho ƒë·∫∑t h√†ng
    if (!user?._id) {
      alert("‚ö†Ô∏è Vui l√≤ng ƒëƒÉng nh·∫≠p tr∆∞·ªõc khi ƒë·∫∑t h√†ng!");
      return;
    }

    setLoading(true);

    try {
      // üßæ Chu·∫©n b·ªã d·ªØ li·ªáu ƒë∆°n h√†ng
      const orderData = {
        userId: user._id,
        name: form.name,
        phone: form.phone,
        address: form.address,
        paymentMethod: form.payment,
        status: form.payment === "cod" ? "pending" : "waiting_payment",
        totalPrice: total,
        products: items.map((i) => ({
          productId: i._id,
          quantity: i.quantity,
          price: i.price,
        })),
      };
      console.log("üì§ G·ª≠i orderData:", orderData);

      // üõí G·ª≠i request t·∫°o ƒë∆°n h√†ng
      const newOrder = await createOrder(orderData);
      console.log("‚úÖ ƒê∆°n h√†ng ƒë√£ t·∫°o:", newOrder);

      // ‚úÖ Xo√° gi·ªè h√†ng sau khi t·∫°o
      clearCart();

      // N·∫øu thanh to√°n COD => ho√†n t·∫•t
      if (form.payment === "cod") {
        alert("üéâ ƒê·∫∑t h√†ng th√†nh c√¥ng! C·∫£m ∆°n b·∫°n ƒë√£ mua s·∫Øm.");
        onComplete("cod");
      } else {
        // N·∫øu l√† chuy·ªÉn kho·∫£n, m·ªü trang QR
        onComplete("bank");
      }
    } catch (err) {
      console.error("L·ªói khi t·∫°o ƒë∆°n h√†ng:", err);
      alert("‚ùå C√≥ l·ªói x·∫£y ra khi t·∫°o ƒë∆°n h√†ng. Vui l√≤ng th·ª≠ l·∫°i sau.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="checkout-container">
      <h2>üìù Th√¥ng tin thanh to√°n</h2>

      <form onSubmit={handleSubmit} className="checkout-form">
        {/* H·ªç v√† t√™n */}
        <div className="form-group">
          <User className="form-icon" />
          <input
            type="text"
            name="name"
            value={form.name}
            onChange={handleChange}
            placeholder="H·ªç v√† t√™n"
            required
          />
        </div>

        {/* S·ªë ƒëi·ªán tho·∫°i */}
        <div className="form-group">
          <Phone className="form-icon" />
          <input
            type="tel"
            name="phone"
            value={form.phone}
            onChange={handleChange}
            placeholder="S·ªë ƒëi·ªán tho·∫°i"
            required
          />
        </div>

        {/* ƒê·ªãa ch·ªâ */}
        <div className="form-group">
          <MapPin className="form-icon" />
          <textarea
            name="address"
            value={form.address}
            onChange={handleChange}
            placeholder="ƒê·ªãa ch·ªâ giao h√†ng"
            required
          />
        </div>

        {/* Ph∆∞∆°ng th·ª©c thanh to√°n */}
        <div className="form-group">
          <CreditCard className="form-icon" />
          <select name="payment" value={form.payment} onChange={handleChange}>
            <option value="cod">Thanh to√°n khi nh·∫≠n h√†ng (COD)</option>
            <option value="bank">Chuy·ªÉn kho·∫£n ng√¢n h√†ng (QR)</option>
          </select>
        </div>

        <h3 className="checkout-total">
          T·ªïng c·ªông: <span>{total.toLocaleString()} VND</span>
        </h3>

        <button type="submit" className="checkout-btn" disabled={loading}>
          {loading ? "ƒêang x·ª≠ l√Ω..." : "‚úÖ X√°c nh·∫≠n thanh to√°n"}
        </button>
      </form>
    </div>
  );
}
